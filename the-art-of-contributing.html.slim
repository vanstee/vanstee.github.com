doctype html
html
  head
    meta charset="utf-8"
    title The Art of Contributing
    link href="http://fonts.googleapis.com/css?family=Vollkorn" rel="stylesheet" type="text/css" media="screen"
    link href="http://fonts.googleapis.com/css?family=Open+Sans:400,700" rel="stylesheet" type="text/css" media="screen"
    link href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono" rel="stylesheet" type="text/css"
    link href="/stylesheets/stylesheet.css" rel="stylesheet" type="text/css" media="screen"
    link href="/favicon.png" rel="icon" type="image/png" 
    script type="text/javascript" src="//google-analytics.com/ga.js"
    javascript:
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-36354560-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script');
        ga.type = 'text/javascript';
        ga.async = true;
        ga.src = 'http://www.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(ga, s);
      })();

      window.addEventListener('load', function() { window.scrollTo(0, 0); });
  body
    div.navigation
      .logo
        a href="/" V
      ul
        li
          a href="/notes.html" Notes
        li
          a href="/info.html" Info
      div.clearfix
    div.header
      h1 The Art of Contributing
    div.article
      p.date 16 April 2014
      h2
        ' It’s easier than ever to share code online and accept contributions from a larger community, whether it’s open sourcing a library on
        a href="https://github.com" GitHub
        '  or sharing your product idea on
        a href="https://assemblymade.com" Assembly
        ' .
      p So then why is it still so difficult to engage a community and receive high-quality contributions. I’m talking about real collaboration; not a pile of user feedback and bug reports to sort through. Here are three key ideas to encourage collaboration and help grow a community around your project.
      h2 Curate work to be done
      p The single hardest part in joining a new community is figuring out where to start. Dealing with friction before you’ve invested any time will most likely end with that new member leaving.
      p For software projects make sure you have detailed instructions on how to bootstrap the project and start development or, even better, add a Vagrantfile to build a VM for development and take all the guess work out of copying and pasting commands.
      p
        ' Next and most important, make sure you have work spec’d out and ready to be worked on.
        a href="https://github.com/elixir-lang/elixir/issues?state=open" Elixir
        |  does this amazingly well, with fully explained features, tags for difficulty level and individual libraries, and sometimes even code examples. Also, adding a checklist for acceptance can make new features really easy to digest. Basically, if a newcomer has to ask a question about a new feature before they get started, they’re probably just going to move on.
      h2 Keep things out of your brain
      p Take every chance you get to dump all the knowledge you have stored in your brain somewhere the rest of the community can find and discuss. It really helps to know what the leaders of a project are thinking so you can make decisions on your own. Publishing blog posts, writing well-thought-out responses to questions, and being vocal about what you’re working on in a chatroom or on twitter can give the rest of the community a great mental image of the current state of the project and where it’s headed.
      h2 Bias towards merging
      p Here’s a common scenario: A new user comes along, picks up some work to be done and submits a pull request. The feature technically works, but the indentation is off and they’re using some now deprecated methods.
      p A typical first reaction would be to quickly tell them what’s wrong and leave the pull request hanging. This is sort of a bummer as a new contributor. You just spent time and effort contributing back to a project you like, and the first thing you hear back is basically, “No.” As a project leader, what can you do instead? Unless there are major problems with the pull request, checkout the branch locally, make the minor changes yourself and get it merged. Then you can go back and more easily show and explain the small modifications you made to the contributor.
      p Most contributors wont start a new task until their current one is finished and merged in. So merging new work quickly allows newcomers to stay motivated and keep working.
      h2 Recap
      p Basically all of this advice boils down to telling users what the project needs, being vocal with your thoughts and decisions, and putting in the extra effort to accept new contributions. Being nice and patient wouldn’t hurt either. Hope this helps you whip your projects into shape and start accepting new contributions.
